# -*- coding: utf-8 -*-
"""VGG16 SGD

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HlsZAK_HFB6TjIIOyA90BISHatTt3BXL
"""

#VGG16 SGD Optimizer

pip install pyyaml h5py

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cv2
import csv
from random import shuffle
import tensorflow as tf
from tqdm import tqdm
import keras,os
from keras.optimizers import SGD
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPool2D , Flatten
from keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split

trainDirectory = '/content/drive/MyDrive/Dataset/Train'
testDirectory = "/content/drive/MyDrive/Dataset/Test"
IMG_SIZE = 224
LR = 0.001
MODEL_NAME = 'Sports Image Classification VGG'

def create_label(image_name):
    """ Create an one-hot encoded vector from image name """
    word_label = image_name.split('_')[0]

    if word_label == 'Basketball':
        return np.array([1, 0, 0, 0, 0, 0])
    elif word_label == 'Football':
        return np.array([0, 1, 0, 0, 0, 0])
    elif word_label == 'Rowing':
        return np.array([0, 0, 1, 0, 0, 0])
    elif word_label == 'Swimming':
        return np.array([0, 0, 0, 1, 0, 0])
    elif word_label == 'Tennis':
        return np.array([0, 0, 0, 0, 1, 0])
    elif word_label == 'Yoga':
        return np.array([0, 0, 0, 0, 0, 1])

def create_train_data():
    training_data = []
    labels = []
    for img in tqdm(os.listdir(trainDirectory)):
        path = os.path.join(trainDirectory, img)
        img_data = cv2.imread(path, 1)
        img_data = cv2.resize(img_data, (IMG_SIZE, IMG_SIZE))
        #img_data = img_data.reshape(IMG_SIZE, IMG_SIZE, 3)
        training_data.append(np.array(img_data))
        labels.append(create_label(img))
    return np.array(training_data), np.array(labels)

x, y = create_train_data()
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=42)

def VGG16():
  model = Sequential()
  model.add(Conv2D(input_shape=(224,224,3),filters=64,kernel_size=(3,3),padding="same", activation="relu"))
  model.add(Conv2D(filters=64,kernel_size=(3,3),padding="same", activation="relu"))
  model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
  model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
  model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
  model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
  model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
  model.add(Flatten())
  model.add(Dense(units=4096,activation="relu"))
  model.add(Dense(units=4096,activation="relu"))
  model.add(Dense(units=6, activation="softmax"))

  opt = SGD(lr=0.001)
  model.compile(optimizer=opt, loss=keras.losses.categorical_crossentropy, metrics=['accuracy'])
  return model

model = VGG16()

model.fit(X_train, y_train,batch_size= 25,epochs = 50,validation_data = (X_test, y_test), verbose=1)

model.save_weights("esm.h5")

vggtest = VGG16()

def create_test_data():
    testing_data=[]
    for img in tqdm(os.listdir(testDirectory)):
        path = os.path.join(testDirectory, img)
        img_data = cv2.imread(path, 1)
        img_data = cv2.resize(img_data, (IMG_SIZE, IMG_SIZE))
        testing_data.append(np.array(img_data))
    return testing_data

vggtest.load_weights("esm.h5")

test_data = np.array(create_test_data())
res = model.predict(test_data)

# getting indices of max values
indices = []
for i in res:
  indices.append(np.argmax(i))

images = os.listdir(testDirectory)

images_series = pd.Series(images)

indices_series = pd.Series(indices)

submission_df = pd.DataFrame({'image_name': images_series, 'label': indices_series})

submission_df.to_csv('VGG16 SGD Submission.csv', index=False)

